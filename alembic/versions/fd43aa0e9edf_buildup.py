"""buildup

迁移 ID: fd43aa0e9edf
父迁移: 
创建时间: 2024-06-08 15:43:01.487278

"""

from __future__ import annotations

from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa


revision: str = "fd43aa0e9edf"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = ("catch",)
depends_on: str | Sequence[str] | None = None


def upgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "catch_level",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("weight", sa.Float(), nullable=False),
        sa.Column("level_color_code", sa.String(), nullable=False),
        sa.Column("data_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("data_id", name=op.f("pk_catch_level")),
        sa.UniqueConstraint("name"),
        info={"bind_key": "catch"},
    )
    with op.batch_alter_table("catch_level", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_catch_level_updated_at"), ["updated_at"], unique=False
        )

    op.create_table(
        "catch_user_data",
        sa.Column("qq_id", sa.Integer(), nullable=False),
        sa.Column("money", sa.Float(), nullable=False),
        sa.Column("pick_count_remain", sa.Integer(), nullable=False),
        sa.Column("pick_count_last_calculated", sa.Float(), nullable=False),
        sa.Column("pick_time_delta", sa.Float(), nullable=False),
        sa.Column("pick_max_cache", sa.Integer(), nullable=False),
        sa.Column("data_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("data_id", name=op.f("pk_catch_user_data")),
        sa.UniqueConstraint("qq_id"),
        info={"bind_key": "catch"},
    )
    with op.batch_alter_table("catch_user_data", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_catch_user_data_updated_at"), ["updated_at"], unique=False
        )

    op.create_table(
        "catch_award",
        sa.Column("img_path", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("level_id", sa.Integer(), nullable=True),
        sa.Column("data_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["level_id"],
            ["catch_level.data_id"],
            name=op.f("fk_catch_award_level_id_catch_level"),
        ),
        sa.PrimaryKeyConstraint("data_id", name=op.f("pk_catch_award")),
        sa.UniqueConstraint("name"),
        info={"bind_key": "catch"},
    )
    with op.batch_alter_table("catch_award", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_catch_award_updated_at"), ["updated_at"], unique=False
        )

    op.create_table(
        "catch_award_counter",
        sa.Column("target_user_id", sa.Integer(), nullable=True),
        sa.Column("target_award_id", sa.Integer(), nullable=True),
        sa.Column("award_count", sa.Integer(), nullable=False),
        sa.Column("data_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["target_award_id"],
            ["catch_award.data_id"],
            name=op.f("fk_catch_award_counter_target_award_id_catch_award"),
        ),
        sa.ForeignKeyConstraint(
            ["target_user_id"],
            ["catch_user_data.data_id"],
            name=op.f("fk_catch_award_counter_target_user_id_catch_user_data"),
        ),
        sa.PrimaryKeyConstraint("data_id", name=op.f("pk_catch_award_counter")),
        info={"bind_key": "catch"},
    )
    with op.batch_alter_table("catch_award_counter", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_catch_award_counter_updated_at"),
            ["updated_at"],
            unique=False,
        )

    # ### end Alembic commands ###


def downgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("catch_award_counter", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_catch_award_counter_updated_at"))

    op.drop_table("catch_award_counter")
    with op.batch_alter_table("catch_award", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_catch_award_updated_at"))

    op.drop_table("catch_award")
    with op.batch_alter_table("catch_user_data", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_catch_user_data_updated_at"))

    op.drop_table("catch_user_data")
    with op.batch_alter_table("catch_level", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_catch_level_updated_at"))

    op.drop_table("catch_level")
    # ### end Alembic commands ###
