"""tags and altname

迁移 ID: 746ac4262a29
父迁移: 50ed2ee59be6
创建时间: 2024-06-11 22:45:19.195265

"""

from __future__ import annotations

from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa


revision: str = "746ac4262a29"
down_revision: str | Sequence[str] | None = "50ed2ee59be6"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "catch_level_alt_name",
        sa.Column("level_id", sa.Integer(), nullable=True),
        sa.Column("data_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["level_id"],
            ["catch_level.data_id"],
            name=op.f("fk_catch_level_alt_name_level_id_catch_level"),
        ),
        sa.PrimaryKeyConstraint("data_id", name=op.f("pk_catch_level_alt_name")),
        sa.UniqueConstraint("name"),
        info={"bind_key": "catch"},
    )
    with op.batch_alter_table("catch_level_alt_name", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_catch_level_alt_name_updated_at"),
            ["updated_at"],
            unique=False,
        )

    op.create_table(
        "catch_award_alt_name",
        sa.Column("award_id", sa.Integer(), nullable=True),
        sa.Column("data_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["award_id"],
            ["catch_award.data_id"],
            name=op.f("fk_catch_award_alt_name_award_id_catch_award"),
        ),
        sa.PrimaryKeyConstraint("data_id", name=op.f("pk_catch_award_alt_name")),
        sa.UniqueConstraint("name"),
        info={"bind_key": "catch"},
    )
    with op.batch_alter_table("catch_award_alt_name", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_catch_award_alt_name_updated_at"),
            ["updated_at"],
            unique=False,
        )

    op.create_table(
        "catch_skin_alt_name",
        sa.Column("skin_id", sa.Integer(), nullable=True),
        sa.Column("data_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["skin_id"],
            ["catch_skin.data_id"],
            name=op.f("fk_catch_skin_alt_name_skin_id_catch_skin"),
        ),
        sa.PrimaryKeyConstraint("data_id", name=op.f("pk_catch_skin_alt_name")),
        sa.UniqueConstraint("name"),
        info={"bind_key": "catch"},
    )
    with op.batch_alter_table("catch_skin_alt_name", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_catch_skin_alt_name_updated_at"),
            ["updated_at"],
            unique=False,
        )

    with op.batch_alter_table("catch_award", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "sortingPriority", sa.Integer(), nullable=False, server_default="0"
            )
        )
        batch_op.add_column(
            sa.Column("tags", sa.String(), nullable=False, server_default="")
        )

    with op.batch_alter_table("catch_level", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "sortingPriority", sa.Integer(), nullable=False, server_default="0"
            )
        )
        batch_op.add_column(
            sa.Column("tags", sa.String(), nullable=False, server_default="0")
        )

    with op.batch_alter_table("catch_skin", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("tags", sa.String(), nullable=False, server_default="0")
        )

    # ### end Alembic commands ###


def downgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("catch_skin", schema=None) as batch_op:
        batch_op.drop_column("tags")

    with op.batch_alter_table("catch_level", schema=None) as batch_op:
        batch_op.drop_column("tags")
        batch_op.drop_column("sortingPriority")

    with op.batch_alter_table("catch_award", schema=None) as batch_op:
        batch_op.drop_column("tags")
        batch_op.drop_column("sortingPriority")

    with op.batch_alter_table("catch_skin_alt_name", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_catch_skin_alt_name_updated_at"))

    op.drop_table("catch_skin_alt_name")
    with op.batch_alter_table("catch_award_alt_name", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_catch_award_alt_name_updated_at"))

    op.drop_table("catch_award_alt_name")
    with op.batch_alter_table("catch_level_alt_name", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_catch_level_alt_name_updated_at"))

    op.drop_table("catch_level_alt_name")
    # ### end Alembic commands ###
